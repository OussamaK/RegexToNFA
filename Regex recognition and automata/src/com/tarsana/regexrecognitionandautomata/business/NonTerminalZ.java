package com.tarsana.regexrecognitionandautomata.business;

import java.util.ArrayList;
import java.util.List;

import com.tarsana.regexrecognitionandautomata.utils.Accepteur;
import com.tarsana.regexrecognitionandautomata.utils.Triplet;

public class NonTerminalZ {

	/**
	 * The list of the relations generated by this non terminal.
	 */
	private List<Triplet> listeRelations;

	/**
	 * The maximum number given to any state.
	 */
	private Integer max;

	/**
	 * The list of the accepting states generated by this non terminal.
	 */
	private List<Accepteur> listeAccepteurs;

	/**
	 * the starting state generated by this non terminal.
	 */
	private Integer debut;

	/**
	 * @return the debut
	 */
	public Integer getDebut() {
		return debut;
	}

	/**
	 * @param debut
	 *            the debut to set
	 */
	public void setDebut(Integer debut) {
		this.debut = debut;
	}

	/**
	 * @return the listeRelations
	 */
	public List<Triplet> getListeRelations() {
		return listeRelations;
	}

	/**
	 * @param listeRelations
	 *            the listeRelations to set
	 */
	public void setListeRelations(List<Triplet> listeRelations) {
		this.listeRelations = listeRelations;
	}

	/**
	 * @return the max
	 */
	public Integer getMax() {
		return max;
	}

	/**
	 * @param max
	 *            the max to set
	 */
	public void setMax(Integer max) {
		this.max = max;
	}

	/**
	 * @return the listeAccepteurs
	 */
	public List<Accepteur> getListeAccepteurs() {
		return listeAccepteurs;
	}

	/**
	 * @param listeAccepteurs
	 *            the listeAccepteurs to set
	 */
	public void setListeAccepteurs(List<Accepteur> listeAccepteurs) {
		this.listeAccepteurs = listeAccepteurs;
	}

	public NonTerminalZ() {
		listeRelations = new ArrayList<Triplet>();
		listeAccepteurs = new ArrayList<Accepteur>();
		if (Context.getCurrentSymbol().equals("(")) {
			Context.accept("(");
			NonTerminalS S = new NonTerminalS();
			this.listeAccepteurs.addAll(S.getListeAccepteurs());
			this.listeRelations.addAll(S.getListeRelations());
			this.max = S.getMax();
			this.debut = S.getDebut();
			Context.accept(")");
			if (S.getListeRelations().isEmpty()) {
				Context.raiseError(0);
			}
		}

		else if (!Context.getCurrentSymbol().equals("+")
				&& !Context.getCurrentSymbol().equals(".")
				&& !Context.getCurrentSymbol().equals("*")) {
			listeRelations.add(new Triplet(1, Context.getCurrentSymbol(), 2));
			listeAccepteurs.add(new Accepteur(Context.getCurrentSymbol(), 2));
			this.max = 2;
			this.debut = 1;
			Context.nextSymbol();

		}
	}
}
