package com.tarsana.regexrecognitionandautomata.business;

import java.util.ArrayList;
import java.util.List;

import com.tarsana.regexrecognitionandautomata.utils.Accepteur;
import com.tarsana.regexrecognitionandautomata.utils.Triplet;

public class NonTerminalM {
	/**
	 * The list of the relations generated by this non terminal.
	 */
	private List<Triplet> listeRelations;

	/**
	 * The maximum number given to any state.
	 */
	private Integer max;

	/**
	 * The list of the accepting states generated by this non terminal.
	 */
	private List<Accepteur> listeAccepteurs;

	/**
	 * the starting state generated by this non terminal.
	 */
	private Integer debut;

	/**
	 * @return the debut
	 */
	public Integer getDebut() {
		return debut;
	}

	/**
	 * @param debut
	 *            the debut to set
	 */
	public void setDebut(Integer debut) {
		this.debut = debut;
	}

	/**
	 * @return the listeRelations
	 */
	public List<Triplet> getListeRelations() {
		return listeRelations;
	}

	/**
	 * @param listeRelations
	 *            the listeRelations to set
	 */
	public void setListeRelations(List<Triplet> listeRelations) {
		this.listeRelations = listeRelations;
	}

	/**
	 * @return the max
	 */
	public Integer getMax() {
		return max;
	}

	/**
	 * @param max
	 *            the max to set
	 */
	public void setMax(Integer max) {
		this.max = max;
	}

	/**
	 * @return the listeAccepteurs
	 */
	public List<Accepteur> getListeAccepteurs() {
		return listeAccepteurs;
	}

	/**
	 * @param listeAccepteurs
	 *            the listeAccepteurs to set
	 */
	public void setListeAccepteurs(List<Accepteur> listeAccepteurs) {
		this.listeAccepteurs = listeAccepteurs;
	}

	public NonTerminalM() {
		NonTerminalZ Z = new NonTerminalZ();
		NonTerminalX X = new NonTerminalX();
		this.listeAccepteurs = new ArrayList<>(Z.getListeAccepteurs());
		this.listeRelations = new ArrayList<>(Z.getListeRelations());

		if (!Z.getListeRelations().isEmpty()) {

			// X generates a kleen operator , create a new starting-accepting
			// state.
			if (X.getKleen()) {
				this.listeAccepteurs.add(new Accepteur("epsilon",
						Z.getMax() + 1));
				this.debut = Z.getMax() + 1;
				this.max = this.debut;

				// all acceptors do exactly what the Z's starting state
				// does.
				for (Accepteur accepteur : listeAccepteurs) {
					for (Triplet triplet : Z.getListeRelations()) {
						if (triplet.getOrigin() == Z.getDebut())
							listeRelations.add(new Triplet(
									accepteur.getState(), triplet.getSymbol(),
									triplet.getTarget()));
					}
				}

			}
			// No kleen operator . just copy everything from Z into
			// M.
			else {
				this.debut = Z.getDebut();

				this.max = Z.getMax();
			}
		}
	}

}
